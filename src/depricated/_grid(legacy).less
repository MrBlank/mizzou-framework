/*! GRID MIXINS */
/*--------------------------------------------------------------

* Site:         Mizzou Framework
* Author:       Josh Nichols, MU Web Communications
* Version:      3.2

* Notes
    - make grid system column width defaults match MU logo sizes
     
--------------------------------------------------------------*/

// Default grid settings for a 960 layout with 12 columns 
@grid-column-width:  64;
@grid-gutter-width:  20;
@grid-columns:       12;

// Width variables
@grid-system-width:  unit( (@grid-column-width * @grid-columns) + (@grid-gutter-width * @grid-columns), px);

// Set @grid-total-width to '100%' for a fluid layout or use '@grid-system-width' for a fixed width layout
@grid-total-width: 100%; 

// Apply some styles to the body tag to work with grid elements.
body { 
    width: 100%;
    .clearfix();
}

// This wrapper class keeps outer margins the same width as gutters 
.grid-wrapper() {
    display: block;
    padding-left: @grid-total-width * ((@grid-gutter-width * .5) / @grid-system-width);
    padding-right: @grid-total-width * ((@grid-gutter-width * .5) / @grid-system-width);
    .clearfix();
}
.grid-row( @grid-columns: @grid-columns ) {
    display: block; 
    width: @grid-total-width * ((@grid-gutter-width + @grid-system-width) / @grid-system-width);
    margin-left: @grid-total-width * (((@grid-gutter-width * .5) / @grid-system-width) * -1);
    margin-right: @grid-total-width * (((@grid-gutter-width * .5) / @grid-system-width) * -1);
    .clearfix();
}
.grid-column( @x, @grid-columns: @grid-columns, @float-direction: left ) {
    display: inline;
    float: @float-direction;
    width: @grid-total-width * ((((@grid-gutter-width + @grid-column-width) * @x) - @grid-gutter-width) / @grid-system-width);
    margin-left: @grid-total-width * ((@grid-gutter-width * .5) / @grid-system-width);
    margin-right: @grid-total-width * ((@grid-gutter-width * .5) / @grid-system-width);
}
.grid-push( @offset: 1 ) {
    margin-left: @grid-total-width * (((@grid-gutter-width+@grid-column-width)*@offset) / @grid-system-width) + @grid-total-width * ((@grid-gutter-width * .5) / @grid-system-width);
}
.grid-pull( @offset: 1 ) {
    margin-right: @grid-total-width * (((@grid-gutter-width+@grid-column-width)*@offset) / @grid-system-width) + @grid-total-width * ((@grid-gutter-width * .5) / @grid-system-width);
}

/*doc
---
title: Grid Variables
name: grid-01
category: Grid Mixins
---
 
The grid system is a set of LESS mixins, based on the <a href="http://semantic.gs/">
Semantic Grid System</a>, that take a few variables. The grid defaults to a 12 column, 
fluid grid system. You may override as needed in your LESS file.

    @grid-column-width:  64;
    @grid-gutter-width:  20;
    @grid-columns:       12;
    
Widths are pixel dimentions, but the grid system defualts to a fluid grid for responsive design.
    
    @grid-total-width: 100%;
    
You can override the flexible width of the grid by setting `@grid-total-width` to `@grid-system-width`. 
This will set the total width to a pixel dimention.

    @grid-total-width: @grid-system-width;
    
_Note: This grid system works for IE8+._

*/

/*doc
---
title: Basic Use
name: grid-02
category: Grid Mixins
---

Apply the optional `.grid-wrapper();` mixin for the parent element to keep outer margins the same 
width as gutters. The `.grid-column();` mixin is used for each column element. The number variable 
is how many columns wide to make the element. Each row of elements cannot exceed the number set 
by `@grid-columns`. You can also set a `@float-direction` variable to control the column's float. The 
default is left.

_Note: Other styles are added to the examples below to show the column structures._

```html_example
<div class="basic">
    <article>
        <p>Content</p>
        <p>&#160</p>
        <p>&#160</p>
    </article>
    <aside>
        <p>Aside</p>
        <p>&#160</p>
    </aside>
</div>
```
```
.basic {
    .grid-wrapper();
    background-color: @tan-dark;
    .rem(margin-bottom, 1.5);

    p {
        margin-bottom: 0;
        background-color: @tan;
        .rem(padding, 1);
    }
    article {
        .grid-column(8);
    }
    aside {
        .grid-column(4);
    }
}
```
*/

/*doc
---
title: Push and Pull Examples
name: grid-03
category: Grid Mixins
---

The `.grid-push()` and `.grid-pull()` mixins allow you apply left and right indents to your columns. 
_Note: Push and Pull amounts add to the total column count._

```html_example
<div class="push-pull">
    <div class="push">
        <p>Push Column 3</p>
        <p>&#160</p>
    </div>
</div>
<div class="push-pull">
    <div class="pull">
        <p>Pull Column 3</p>
        <p>&#160</p>
    </div>
</div>
```
```
.push-pull {
    .grid-wrapper();
    background-color: @tan-dark;
    .rem(margin-bottom, 1.5);

    p {
        margin-bottom: 0;
        background-color: @tan;
        .rem(padding, 1);
    }
    .push {
        .grid-column(9);
        .grid-push(3);
    }
    .pull {
        .grid-column(9);
        .grid-pull(3);
    }
}
```
*/

/*doc
---
title: Layered Page Structure
name: grid-04
category: Grid Mixins
---

Here is an example of a page with full-width layers of color.

```html_example
<div class="header-layer">
    <div class="header-wrapper">
        <header>
            <p>Header</p>
        </header>
    </div>
</div>
<div class="content-layer">
    <div class="content-wrapper">
        <article>
            <p>Content</p>
            <p>&#160</p>
            <p>&#160</p>
        </article>
        <aside>
            <p>Aside</p>
            <p>&#160</p>
        </aside>
    </div>
</div>
<div class="footer-layer">
    <div class="footer-wrapper">
        <footer>
            <p>Footer</p>
        </footer>
    </div>
</div>   
```
```
.header-layer,
.content-layer,
.footer-layer {
    .rem(padding, 0, 1);

    p {
        margin-bottom: 0;
        .rem(padding, 1);
        background-color: fade(#fff, 50%);
    }
}
.header-wrapper,
.content-wrapper,
.footer-wrapper {
    .grid-wrapper();
}
.header-layer {
    background-color: @grey-dark;
    
    header {
        .column(12);
    }
}
.content-layer {
    background-color: @tan;
    
    article {
        .grid-column(8);
    }
    aside {
        .grid-column(4);
    }   
}
.footer-layer {
    background-color: @grey-dark;
    .rem(margin-bottom, 2);
    
    footer {
        .grid-column(12);
    }
}

```
*/

/*doc
---
title: Nested Columns
name: grid-05
category: Grid Mixins
---

A `.grid-row()` mixin must be applied to the containing element of the nested columns. That mixin should contain 
a variable that is the number of grid units of its parent (8, in this case), and the same number must be passed 
into the nested columns as a second parameter (`.grid-column(4,8)` in the example below).

```html_example
<div class="nested">
    <article>
        <div class="row">
            <div class="eight-of-eight">
                <p>100% Wide</p>
            </div>
        </div>
        <hr class="space">
        <div class="row">
            <div class="four-of-eight">
                <p>50% Wide</p>
                <p>&#160</p>
            </div>
            <div class="four-of-eight">
                <p>50% Wide</p>
                <p>&#160</p>
            </div>
        </div>
        <hr class="space">
        <div class="row">
            <div class="two-of-eight">
                <p>25% Wide</p>
                <p>&#160</p>
            </div>
            <div class="two-of-eight">
                <p>25% Wide</p>
                <p>&#160</p>
            </div>
            <div class="two-of-eight">
                <p>25% Wide</p>
                <p>&#160</p>
            </div>
            <div class="two-of-eight">
                <p>25% Wide</p>
                <p>&#160</p>
            </div>
        </div>
    </article>
    <aside>
        <p>Aside</p>
        <p>&#160</p>
        <p>&#160</p>
    </aside>
</div>
```
```
.nested {
    .grid-wrapper();
    background-color: @tan-dark;
    .rem(margin-bottom, 1.5);

    p {
        margin-bottom: 0;
        background-color: @tan;
        .rem(padding, 1);
    }
    article {
        .grid-column(8);
    }
    aside {
        .grid-column(4);
    }
    .row {
        .grid-row(8);
    }
    .two-of-eight {
        .grid-column(2,8);
    }
    .four-of-eight {
        .grid-column(4,8);
    }
    .eight-of-eight {
        .grid-column(8,8); 
    }
}
```
*/

