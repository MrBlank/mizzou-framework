/*! GRID MIXINS */
/*--------------------------------------------------------------

* Site:         Mizzou Framework
* Author:       Josh Hughes, MU Web Communications
* Version:      3.2
     
--------------------------------------------------------------*/

.grid-column(@x, @y, @padding-left: 0.5rem, @padding-right: 0.5rem, @float-direction: left) {    
    float: @float-direction;
    width: (@x * 100% / @y);
    padding-left: @padding-left;
    padding-right: @padding-right;
}

.grid-row(@padding-left: 0.5rem, @padding-right: 0.5rem) {
    padding-left: @padding-left;
    padding-right: @padding-right;
    .clearfix();
}

.grid-push(@x, @y) {
    margin-left: (@x * 100% / @y);
}
.grid-pull(@x, @y) {
    margin-right: (@x * 100% / @y);
}



/*doc
---
title: Grid Setup
name: grid-01
category: Grid Mixin
---

This grd system assumes you have `box-sizing` set to `border-box` on elements that use these mixins.

## Columns

This mixin takes a given fraction, and generates a column. The gutter is created from padding. 

    .grid-column(1, 2);

... which will output the following:

    float: left
    width: 50%;

Parameter options:
   
    @x                  Numerator
    @y                  Denominator
    @padding-left       (Optional) Padding left for the column (defaults to 0.5rem)
    @padding-right      (Optional) Padding right for the column (defaults to 0.5rem)
    @float-direction    (Optional) How to float the column (defaults to left)

## Rows

To create rows, add this mixin to the colum container. It adds left and right padding so 
outer padding is consistant with the column gutters.

    .grid-row();

Parameter options:

     @padding-left      (Optional) Padding left for the row (defaults to 0.5rem)
     @padding-right     (Optional) Padding right for the row (defaults to 0.5rem)


## Push and Pull

You can add optional left and right margins to push and pull columns. It works like the 
`grid-pad-column()` mixin and takes a given fraction to calculate the margin.

    .grid-push(1, 6)    // Adds left margin 1/6 of the parent's width
    .grid-pull(1, 6)    // Adds right margin 1/6 of the parent's width

Parameter options:
   
    @x                  Numerator
    @y                  Denominator

_Note: This grid system only works for IE8+. It requires `box-sizing: border-box;` compatibility on the columns._

_Note: Other styles are added to the examples below to show the column structures._

*/

/*doc
---
title: Basic Use
name: grid-02
category: Grid Mixin
---

A basic 2-column layout. The content area is 2/3 the page width and the aside is 1/3.   

```html_example
<div class="basic">
    <article>
        <p>Content</p>
        <p>&#160</p>
        <p>&#160</p>
    </article>
    <aside>
        <p>Aside</p>
        <p>&#160</p>
    </aside>
</div>
```
```
.basic {
    .grid-row();
    background-color: @tan-dark;
    .rem(margin-bottom, 1.5);

    p {
        margin-bottom: 0;
        background-color: @tan;
        .rem(padding, 1);
    }
    article {
        .grid-column(2, 3);
    }
    aside {
        .grid-column(1, 3);
    }
}
```
*/

/*doc
---
title: Push and Pull Examples
name: grid-03
category: Grid Mixin
---

```html_example
<div class="push-pull">
    <div class="push">
        <p>Push Column 3</p>
        <p>&#160</p>
    </div>
</div>
<div class="push-pull">
    <div class="pull">
        <p>Pull Column 3</p>
        <p>&#160</p>
    </div>
</div>
```
```
.push-pull {
    .grid-row();
    background-color: @tan-dark;
    .rem(margin-bottom, 1.5);

    p {
        margin-bottom: 0;
        background-color: @tan;
        .rem(padding, 1);
    }
    .push {
        .grid-column(3, 4);
        .grid-push(1, 4);
    }
    .pull {
        .grid-column(3, 4);
        .grid-pull(1, 4);
    }
}
```
*/

/*doc
---
title: Layered Page Structure
name: grid-04
category: Grid Mixin
---

Here is an example of a page with full-width layers of color.

```html_example
<div class="header-layer">
    <div class="header-wrapper">
        <header>
            <p>Header</p>
        </header>
    </div>
</div>
<div class="content-layer">
    <div class="content-wrapper">
        <article>
            <p>Content</p>
            <p>&#160</p>
            <p>&#160</p>
        </article>
        <aside>
            <p>Aside</p>
            <p>&#160</p>
        </aside>
    </div>
</div>
<div class="footer-layer">
    <div class="footer-wrapper">
        <footer>
            <p>Footer</p>
        </footer>
    </div>
</div>   
```
```
.header-layer,
.content-layer,
.footer-layer {
    .rem(padding, 0, 1);

    p {
        margin-bottom: 0;
        .rem(padding, 1);
        background-color: fade(#fff, 50%);
    }
}
.header-wrapper,
.content-wrapper,
.footer-wrapper {
    .grid-row();
}
.header-layer2 {
    background-color: @grey-dark;

    header {
        .grid-column(1, 1);
    }
}
.content-layer {
    background-color: @tan;

    article {
        .grid-column(4, 6);
    }
    aside {
        .grid-column(2, 6);
    }   
}
.footer-layer {
    background-color: @grey-dark;
    .rem(margin-bottom, 2);

    footer {
        .grid-column(1 ,1);
    }
}

```
*/

/*doc
---
title: Nested Columns
name: grid-05
category: Grid Mixin
---

Remove left and right padding from either the parent column or the nested columns to prevent 
padding from doubling up around the parent. In this case the padding was removed from the 
`article` element.

```html_example
<div class="nested">
    <article>
        <div class="one-whole">
            <p>100% Wide</p>
        </div>
        <hr class="space">
        <div class="one-half">
            <p>50% Wide</p>
            <p>&#160</p>
        </div>
        <div class="one-half">
            <p>50% Wide</p>
            <p>&#160</p>
        </div>
        <hr class="space">
        <div class="one-fourth">
            <p>25% Wide</p>
            <p>&#160</p>
        </div>
        <div class="one-fourth">
            <p>25% Wide</p>
            <p>&#160</p>
        </div>
        <div class="one-fourth">
            <p>25% Wide</p>
            <p>&#160</p>
        </div>
        <div class="one-fourth">
            <p>25% Wide</p>
            <p>&#160</p>
        </div>
    </article>
    <aside>
        <p>Aside</p>
        <p>&#160</p>
        <p>&#160</p>
    </aside>
</div>
```
```
.nested {
    .grid-row();
    background-color: @tan-dark;
    .rem(margin-bottom, 1.5);

    p {
        margin-bottom: 0;
        background-color: @tan;
        .rem(padding, 1);
    }
    article {
        .grid-column(2, 3, 0, 0);
    }
    aside {
        .grid-column(1, 3);
    }
    .one-fourth {
        .grid-column(1, 4);
    }
    .one-half {
        .grid-column(1, 2);
    }
    .one-whole {
        .grid-column(1, 1); 
    }
}
```
*/

