/**
 * Mizzou Framework - Sass: Base Mixins
 *
 * Requires: _variables.scss
 *
 * @author Josh Hughes (hughesjd@missouri.edu), Josh Nichols (nicholsjc@missouri.edu), University of Missouri
 * @copyright 2015 Curators of the University of Missouri
 * @version 1.00
 */
 
/* @group Placeholder Selectors */

// Apply on a container to have that container enclose floated elements.

@mixin clear-fix()
{   
    &:before,
    &:after
    {
        content: ' ';
        display: table;
    }
    
    &:after
    {
        clear: both;
    }
}

// First child - no bottom margin
@mixin first-child() 
{
    > :first-child 
    { 
        margin-top: 0 !important; 
    }
}
// Last child - no bottom margin
@mixin last-child() 
{
    > :last-child 
    { 
        margin-bottom: 0 !important; 
    }
}

/*
The `.center-block()` mixin is a quick way to center layouts.

```html_example
<div class="center-me">
    <p>A Centered, block-level element.</p>
</div>
```
Here are the variables that can be used:

```
@max-width  
@min-width

.center-me {
    .center-block(@bmax-width: 300px, @min-width: 150px);
    .box();
    width: 50%;
}
*/

@mixin center-block (
    $max-width: none, 
    $min-width: none
) 
{
    position: relative;
    margin-left: auto;
    margin-right: auto;
    
    @if ($max-width != 'none') {
        max-width: $max-width;
    }
    @if ($min-width != 'none') {
        min-width: $min-width;
    }
    
}

/**
 * Sets up containing div, centered with a max-width
 *
 * @param unit $max-width (Optional) Width of the block. Defaults to 100%
 * @param boolean $include-print-style (Optional) Whether to set the block to 100% for printing. Defaults to true
 */
/*@mixin center-block(
    $max-width:                 100%,
    $include-print-style:       true
)
{
    margin-left: auto;
    margin-right: auto;
    max-width: $max-width;
    
    @if (($max-width != 100%) and ($include-print-style == true)) {
        @media print
        {
            max-width: 100%;
        }
    }
}*/


// Center align an image or figure.
@mixin align-center()
{
    margin: 0 auto 1em auto;
    text-align: center;
}

// Left align an image or figure.
@mixin align-left()
{
    margin: 0 1em 1em 0;
    float: left;
    display: block;
}

// Right align an image or figure.
@mixin align-right()
{
    margin: 0 0 1em 1em;
    float: right;
    display: block;
}

// Ignore set widths and heights for images, so they work well with responsive containers
@mixin flexible-image()
{
    max-width: 100%;
    width: auto;
    height: auto;
}

/* @end */

/**
 * Image replacement technique. Offsets the element text and sets a background image
 *
 * @param string $filename (Optional) Filename of the image. Defaults to 'none'
 * @param unit $width (Optional) Width of the image. Defaults to 'none'
 * @param unit $height (Optional) Height of the image. Defaults to 'none'
 */
@mixin replace-with-image(
    $filename:      'none',
    $width:         'none',
    $height:        'none'
)
{
    display: block;
    text-indent: 200%;
    white-space: nowrap;
    overflow: hidden;
    padding: 0;
    background-repeat: no-repeat;
    
    @if ($filename != 'none') {
        background-image: url('#{$image-path}/#{$filename}');
    }
    
    @if ($width != 'none') {
        width: $width;
    }
    
    @if ($height != 'none') {
        height: $height;
    }
}

// Version used with Signatures. We need to pick one.

// Replaces background image with content selector and after pseudo element for printing

@mixin print-image($image) 
{
    position: relative;
    background: none;
    
    &:after {
        content: url('#{$image}');
        text-indent: 0;
        display: block;
        position: absolute;
        top: 0;
        left: 0;
    }
}
 

/*
The `.box()` mixin is good for adding empasis to an element. 

```html_example
<div class="box-example">
    <p>A box with some added style options.</p>
</div>
```
Here are the variables that can be used with their defaults:

```
@background: @color-box-bg          // Use 'none' to remove
@padding: 1                         // This is a REM unit 
@border-size: 0                     // Change this to add a border
@border-color: @color-box-border 
@border-style: solid

.box-example {
    .box(@gold-lightest, 1.5, 1px, @gold);
}
*/

@mixin box (
    $background: $box-bg-color, 
    $padding: 1rem, 
    $border-size: 0px, 
    $border-color: $box-border-color, 
    $border-style: solid
    ) 
{
    padding: $padding; 
    margin-bottom: 1.5rem; 
    @include first-child();
    @include last-child();
    
    @if ($border-size != "0") {
        border: $border-style $border-size $border-color;
    }
    @if ($box-bg-color != "none") {
        background-color: $background;
    }
}




// Inset images

@mixin inset-images()
{
    figure.left,
    .alignleft
    {
        @include align-left();
        max-width: $inset-image-width;
    }
    figure.right,
    .alignright
    {
        @include align-right();
        max-width: $inset-image-width;
    }
   
}




// Border Raduis

@mixin border-radius($radius: $base-border-radius) 
{
    border-radius: $radius;
}

// Single side border-radius
@mixin border-top-radius($radius: $base-border-radius) 
{
    border-top-right-radius: $radius;
    border-top-left-radius: $radius;
}

@mixin border-right-radius($radius: $base-border-radius) 
{
    border-bottom-right-radius: $radius;
    border-top-right-radius: $radius;
}

@mixin border-bottom-radius($radius: $base-border-radius) 
{
    border-bottom-right-radius: $radius;
    border-bottom-left-radius: $radius;
}

@mixin border-left-radius($radius: $base-border-radius) 
{
    border-bottom-left-radius: $radius;
    border-top-left-radius: $radius;
}








